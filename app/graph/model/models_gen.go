// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// Notifications from the coach backend app to the user
type Coach struct {
	// Text with the notification
	Message *string      `json:"message"`
	Status  *CoachStatus `json:"status"`
}

// Response to commands
type CommandResponse struct {
	Message *string `json:"message"`
}

// Speed has all the data related with measuring speed exercises
type Speed struct {
	// Uniq identifier for each data pushed
	ID int `json:"Id"`
	// Absolute position (height) of the climber (meters)
	Position float64 `json:"position"`
	// Current speed of the climber (m/s)
	Speed float64 `json:"speed"`
	// Number of pull ups done since the last reset
	PullUps *int `json:"pull_ups"`
	// Difference of speed between the fastest pull up and the latest one, in percentage (0-100)
	SpeedLoss *float64 `json:"speed_loss"`
	// Speed of the last pull up (m/s)
	LastSpeed *float64 `json:"last_speed"`
	// Max speed since reset (m/s)
	MaxSpeed *float64 `json:"max_speed"`
}

// Commands send from the client to the backend to control the state
type SpeedCommand struct {
	Command *SpeedCommandType `json:"command"`
	// Value associated with some commands
	Value *float64 `json:"value"`
}

type SpeedCommandBackend struct {
	Command *SpeedCommandBackendType `json:"command"`
	// Value associated with some commands
	Value *float64 `json:"value"`
}

// Strength data
type Strength struct {
	// Time since the exercise started (seconds)
	Time *float64 `json:"time"`
	// Current strength (Newtons)
	Strength *float64 `json:"strength"`
	// Max strength since reset (Newtons)
	MaxStrength *float64 `json:"max_strength"`
	// Average strength since reset (Newtons)
	AvgStrength *float64 `json:"avg_strength"`
	// RFD: rate of force development since reset (N/s)
	// Should be normalized with the weight in the frontend
	Rfd *float64 `json:"rfd"`
	// FTI: force-time integral since reset ()
	// Should be normalized with the weight?
	Fti *float64 `json:"fti"`
	// Difference of strength between the max and the latest value, in percentage (0-100)
	StrengthLoss *float64 `json:"strength_loss"`
	// Duty cycle
	// Percentage of exercise active vs rest
	DutyCycle *float64 `json:"duty_cycle"`
	// Time between measures (seconds)
	Interval *float64 `json:"interval"`
}

// Commands send from the client to the backend to control the state
type StrengthCommand struct {
	Command *StrengthCommandType `json:"command"`
	// Value associated with some commands
	Value *float64 `json:"value"`
}

// Commands send from the backend to the client to control the state
type StrengthCommandBackend struct {
	Command *StrengthCommandBackendType `json:"command"`
	// Value associated with some commands
	Value *float64 `json:"value"`
}

type CoachStatus string

const (
	CoachStatusReady  CoachStatus = "READY"
	CoachStatusPaused CoachStatus = "PAUSED"
)

var AllCoachStatus = []CoachStatus{
	CoachStatusReady,
	CoachStatusPaused,
}

func (e CoachStatus) IsValid() bool {
	switch e {
	case CoachStatusReady, CoachStatusPaused:
		return true
	}
	return false
}

func (e CoachStatus) String() string {
	return string(e)
}

func (e *CoachStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CoachStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid COACH_STATUS", str)
	}
	return nil
}

func (e CoachStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SpeedCommandBackendType string

const (
	SpeedCommandBackendTypeEnd SpeedCommandBackendType = "END"
)

var AllSpeedCommandBackendType = []SpeedCommandBackendType{
	SpeedCommandBackendTypeEnd,
}

func (e SpeedCommandBackendType) IsValid() bool {
	switch e {
	case SpeedCommandBackendTypeEnd:
		return true
	}
	return false
}

func (e SpeedCommandBackendType) String() string {
	return string(e)
}

func (e *SpeedCommandBackendType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SpeedCommandBackendType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SPEED_COMMAND_BACKEND_TYPE", str)
	}
	return nil
}

func (e SpeedCommandBackendType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SpeedCommandType string

const (
	SpeedCommandTypeSimulate  SpeedCommandType = "SIMULATE"
	SpeedCommandTypePause     SpeedCommandType = "PAUSE"
	SpeedCommandTypeRestart   SpeedCommandType = "RESTART"
	SpeedCommandTypeReset     SpeedCommandType = "RESET"
	SpeedCommandTypeCalibrate SpeedCommandType = "CALIBRATE"
)

var AllSpeedCommandType = []SpeedCommandType{
	SpeedCommandTypeSimulate,
	SpeedCommandTypePause,
	SpeedCommandTypeRestart,
	SpeedCommandTypeReset,
	SpeedCommandTypeCalibrate,
}

func (e SpeedCommandType) IsValid() bool {
	switch e {
	case SpeedCommandTypeSimulate, SpeedCommandTypePause, SpeedCommandTypeRestart, SpeedCommandTypeReset, SpeedCommandTypeCalibrate:
		return true
	}
	return false
}

func (e SpeedCommandType) String() string {
	return string(e)
}

func (e *SpeedCommandType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SpeedCommandType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SPEED_COMMAND_TYPE", str)
	}
	return nil
}

func (e SpeedCommandType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StrengthCommandBackendType string

const (
	StrengthCommandBackendTypeEnd StrengthCommandBackendType = "END"
)

var AllStrengthCommandBackendType = []StrengthCommandBackendType{
	StrengthCommandBackendTypeEnd,
}

func (e StrengthCommandBackendType) IsValid() bool {
	switch e {
	case StrengthCommandBackendTypeEnd:
		return true
	}
	return false
}

func (e StrengthCommandBackendType) String() string {
	return string(e)
}

func (e *StrengthCommandBackendType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StrengthCommandBackendType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid STRENGTH_COMMAND_BACKEND_TYPE", str)
	}
	return nil
}

func (e StrengthCommandBackendType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StrengthCommandType string

const (
	StrengthCommandTypeSimulate       StrengthCommandType = "SIMULATE"
	StrengthCommandTypePause          StrengthCommandType = "PAUSE"
	StrengthCommandTypeRestart        StrengthCommandType = "RESTART"
	StrengthCommandTypeRestartNonStop StrengthCommandType = "RESTART_NON_STOP"
	StrengthCommandTypeTare           StrengthCommandType = "TARE"
	StrengthCommandTypeCalibrate      StrengthCommandType = "CALIBRATE"
	StrengthCommandTypeSampling       StrengthCommandType = "SAMPLING"
)

var AllStrengthCommandType = []StrengthCommandType{
	StrengthCommandTypeSimulate,
	StrengthCommandTypePause,
	StrengthCommandTypeRestart,
	StrengthCommandTypeRestartNonStop,
	StrengthCommandTypeTare,
	StrengthCommandTypeCalibrate,
	StrengthCommandTypeSampling,
}

func (e StrengthCommandType) IsValid() bool {
	switch e {
	case StrengthCommandTypeSimulate, StrengthCommandTypePause, StrengthCommandTypeRestart, StrengthCommandTypeRestartNonStop, StrengthCommandTypeTare, StrengthCommandTypeCalibrate, StrengthCommandTypeSampling:
		return true
	}
	return false
}

func (e StrengthCommandType) String() string {
	return string(e)
}

func (e *StrengthCommandType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StrengthCommandType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid STRENGTH_COMMAND_TYPE", str)
	}
	return nil
}

func (e StrengthCommandType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
